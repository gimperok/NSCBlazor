@page "/Client/{clientId:int?}"

@using NSCBlazor.Client.Helpers
@using NSCBlazor.Shared
@using NSCBlazor.Shared.Models
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager


<style>
    .notif-show {
        display: none;
    }

    .btn-save {
        background-color: rgba(250,240,230,0.75);
        border: 2px solid whitesmoke;     
        color:black;
        margin: 0 40%;
        
    }

    .btn-save:hover {
        background-color: rgba(250,240,230,1);
        border: 2px solid black;
        margin: 0 40%;
    }
    .height55{
        height: 55px;
    }

    .del-btn:hover {
        color: indianred;
    }

    .ord-string:hover {
        color: darkgray;
        font-weight: 600;
    }
</style>



<h3 class="mt-5">@AddOrEditLabel</h3>

<div class="d-flex flex-row" style="width:100%;">
    <div style="width: 30%;
                min-width: 365px;
                margin: 0 10px 0px 0;">
        <i class="@iconPeople" style="color: rgba(250,240,230,0.75); font-size:250pt;"></i>
    </div>

    <div style="width: 50%;
                min-width: 350px;
                margin: 0 auto 0px 0;">
        <EditForm Model="@client"
                  OnValidSubmit="@HandleValidSubmit"
                  OnInvalidSubmit="@HandleInvalidSubmit"
                  Context="EditFormContext">
            <DataAnnotationsValidator />

                <DxFormLayout CssClass="w-75">
                    <DxFormLayoutItem ColSpanMd="12" Caption="Имя" CssClass="height55">
                        <DxTextBox @bind-Text="@client.Name" />
                        <ValidationMessage For="@(() => client.Name)" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="12" Caption="Фамилия" CssClass="height55">
                        <DxTextBox @bind-Text="@client.Surname" />
                        <ValidationMessage For="@(() => client.Surname)" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="12" Caption="Страна" CssClass="height55">
                        <DxTextBox @bind-Text="@client.Country" CssClass="cw-320" />
                        <ValidationMessage For="@(() => client.Country)" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="12" Caption="Город" CssClass="height55">
                        <DxTextBox @bind-Text="@client.City" CssClass="cw-320" />
                        <ValidationMessage For="@(() => client.City)" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="12" Caption="Карго" CssClass="height55">
                        <DxTextBox @bind-Text="@client.Cargo" CssClass="cw-320" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="12" Caption="Тел." CssClass="height55">
                        <DxTextBox @bind-Text="@client.Tel" CssClass="cw-320" />
                    </DxFormLayoutItem>


                    <DxButton SubmitFormOnClick="true"
                              RenderStyle="ButtonRenderStyle.None"
                              Text="@labelButton"
                              CssClass="w-25 btn-save" />
                </DxFormLayout>

        </EditForm>
    </div>
</div>


<div>
    <span class="notifShow mt-3" style="display: none; justify-content: center; color: green;">@notifMessage</span>
</div>

@if (clientId > 0)
{
    if (client.Orders == null)
    {
        <LoadingWheel />
    }
    else if (client.Orders.Count == 0)
    {
        <span style="font-style: italic;">У данного клиента нет заказов.</span>
    }
    else
    {
        <h3 class="mt-5 mb-3">Список заказов:</h3>
        <div style="width:70%;">
            <div class="row" style="width: 70%;">
                <div class="col"><span style="margin-left: 30px;font-weight: 600;">Номер</span></div>
                <div class="col"><span style="margin-left: 30px;font-weight: 600;">Дата</span></div>
                <div class="col"><span style="margin-left: 30px;font-weight: 600;">Пар</span></div>
                <div class="col"><span style="margin-left: 30px;font-weight: 600;">Сумма</span></div>
                <div class="col"><span style="margin-left: 30px;"> </span></div>
            </div>
            <hr />

            @foreach (var order in client.Orders)
            {
                <div class="row" style="width: 70%;">
                    <div class="col" @onclick=@(() => NavigationManager.NavigateTo($"OrderForClient/{clientId}/{order?.Id}"))><span class="ord-string" style="margin-left: 10px; cursor:pointer;">Заказ № @order?.Id</span></div>
                    <div class="col" @onclick=@(() => NavigationManager.NavigateTo($"OrderForClient/{clientId}/{order?.Id}"))><span class="ord-string" style="margin-left: 30px; cursor:pointer;">@order?.DateCreate?.ToShortDateString()</span></div>
                    <div class="col" @onclick=@(() => NavigationManager.NavigateTo($"OrderForClient/{clientId}/{order?.Id}"))><span class="ord-string" style="margin-left: 30px; cursor:pointer;">@((order?.TotalPairs == 0) ? "-" : $"{order?.TotalPairs}")</span></div>
                    <div class="col" @onclick=@(() => NavigationManager.NavigateTo($"OrderForClient/{clientId}/{order?.Id}"))><span class="ord-string" style="margin-left: 30px; cursor:pointer;">@((order?.OrderTotalMoney == 0) ? "-" : $"{order?.OrderTotalMoney}$")</span></div>
                    <div class="col">
                        <span style="margin-left: 30px;">
                            <DxButton RenderStyle="ButtonRenderStyle.None"
                          title="Удалить заказ"
                          CssClass="fa fa-trash del-btn"
                          Click="@(() => OpenDialogeWindow(order.Id))" />
                        </span>
                        
                    </div>
                </div>

                <hr />
            }
        </div>

        @if (DeleteDialogOpen)
        {
            <ModalWindow Title="Подтверждение удаления"
             BodyText=@DeleteText
             BackgroundFormColor="whitesmoke"
             OnClose="@ConfirmDelete_Click"
             DialogType="ModalWindow.ModalDialogType.DeleteCancel">
            </ModalWindow>
        }
    }
}



@code {
    [Parameter]
    public int clientId { get; set; }

    Client client = new Client();
    //List<Order> ordersForThisClients;
    private string? AddOrEditLabel, labelButton, notifMessage, iconPeople;
    private int orderToDeleteNumber { get; set; }
    private bool DeleteDialogOpen { get; set; }
    private string DeleteText = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        if (clientId > 0)
        {
            await LoadClient(clientId);

            await GetAllOrders(clientId);
        }

        AddOrEditLabel = clientId > 0 ? "Изменить клиента:" : "Добавить клиента:";
        iconPeople = clientId > 0 ? "fa fa-user" : "fa fa-user-plus";
        labelButton = "Сохранить";
    }

    private async Task SaveClient_Click(Client client)
    {
        bool resultResponse = false;
        if (clientId < 1)
        {
            //response = await RouteHelper.AddClient(Http, client);
            //if (!response.IsSuccessStatusCode)
            //    return;
            var newClientId = await Http.PostObject(client);

        }
        else
        {
            resultResponse = await Http.PutObject(client);
            if (resultResponse)
            {
                notifMessage = "Данные пользователя успешно обновлены!";
                await JSRuntime.InvokeVoidAsync("ShowNotification", "notifShow");
                StateHasChanged();
            }
            await Task.Run(() => System.Threading.Thread.Sleep(2200));
        }
        NavigationManager.NavigateTo("/clients");
    }

    private async Task GetAllOrders(int clientId)
    {
        /*ordersForThisClients*/
        client.Orders = await Http.GetAllOrderByUserId(clientId);

        await GetAllOrderStringsInOrder();
        StateHasChanged();
    }

    private async Task GetAllOrderStringsInOrder()
    {
        foreach (Order order in client.Orders)
        {
            order.OrderItems = await Http.GetAllStringsByOrderListId(order.Id);
        }
    }

    private async Task LoadClient(int clientId)
    {
        client = await Http.GetClientById(clientId);
    }

    private async Task DeleteOrder(int id)
    {
        await Http.DeleteOrderWithStrings(id);

        await GetAllOrders(clientId);
    }

    private void OpenDialogeWindow(int orderId)
    {
        orderToDeleteNumber = 0;
        DeleteDialogOpen = true;
        orderToDeleteNumber = orderId;
        DeleteText = $"Вы действительно хотите удалить заказ №{orderToDeleteNumber}?";
        StateHasChanged();
    }

    private async Task ConfirmDelete_Click(bool accepted)
    {
        if (accepted && orderToDeleteNumber > 0)
        {
            await DeleteOrder(orderToDeleteNumber);
            orderToDeleteNumber = 0;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    #region EmptyMethodForValidation
    private void HandleValidSubmit()
    {
        SaveClient_Click(client);
    }
    private void HandleInvalidSubmit() { }
    #endregion
}