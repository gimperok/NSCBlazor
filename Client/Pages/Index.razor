@page "/"

@using NSCBlazor.Client.Helpers
@using NSCBlazor.Shared
@using NSCBlazor.Shared.Models
@using System.Text.Json
@*@using ProjectJson.Models
*@
@inject HttpClient Http
@inject NavigationManager NavigationManager


<style>
    .page-link {
        background: peachpuff;
        border-color: black;
        color: black;
        border-width: 2px;
    }

    .page-item.active .page-link {
        background-color: peachpuff;
        border-color: black;
        font-weight: 600;
    }

    .page-link:hover {
        color: black;
        background-color: oldlace;
    }

    .del-btn:hover {
        color: indianred;
    }   
</style>

<PageTitle>Nursace Order App</PageTitle>



@if (allOrdersFromDb is null)
{
    <LoadingWheel />
}
else if (allOrdersFromDb?.Count == 0 && allClients?.Count == 0)
{
    <p>Список заказов пуст.</p>
    <p>Добавьте клиента, нажав <b>"Add client"</b> в меню слева.</p>
}
else if (allOrdersFromDb?.Count == 0 && allClients?.Count > 0)
{
    <AddOrderBtn />
    <span class="d-flex justify-content-center">Список заказов пуст.</span>
}
else if (allOrdersFromDb?.Count > 0 && allClients?.Count > 0)
{
    <AddOrderBtn />


    foreach (var order in ShowOrderInPage())
    {
        <div class="order-item">

            <div class="d-flex justify-content-start" style="width:28%; flex-direction: column;">
                <label style="font-weight: 600;"><a href="/order/@order.Id" style="text-decoration:none; color:black; cursor:pointer;">@order.Client?.ToString()</a></label>
                <label>Всего пар: @order.TotalPairs</label>
                <label>Всего позиций: @order.TotalPosition</label>
            </div>

            <div class="d-flex justify-content-center" style="width:44%;">
                <div style="flex-direction:column;">
                    <label style="font-weight: 600;"><a href="/order/@order.Id" style="text-decoration:none; color:black; cursor:pointer;">Заказ № @order.Id</a></label>
                    <div>
                        <label>@string.Empty</label>
                    </div>
                    <div class="d-flex justify-content-center ">
                        <DxButton RenderStyle="ButtonRenderStyle.None"
                                  title="Удалить заказ"
                                  CssClass="fa fa-trash del-btn"
                                  Click="@(() => OpenDialogeWindow(order.Id))" />
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end" style="flex-direction: column; min-width: 155px; margin-left:auto;">
                <label style="font-weight: 600;">@order.DateCreate?.ToString("dd.MM.yy HH:mm")</label>
                <label>Сумма заказа: @order.OrderTotalMoney.ToString("#.##")$</label>
                <label>Депозит: @order.Deposit.ToString("#.##")$</label>
            </div>
        </div>

    }
    @if (DeleteDialogOpen)
    {
        <ModalWindow Title="Подтверждение удаления"
             BodyText=@DeleteText
             BackgroundFormColor="whitesmoke"
             OnClose="@ConfirmDelete_Click"
             DialogType="ModalWindow.ModalDialogType.DeleteCancel">
        </ModalWindow>
    }
}


@if (allOrdersFromDb?.Count > 2)
{
    <DxPager PageCount="@PageCounter()"
         VisibleNumericButtonCount="3"
         @bind-ActivePageIndex="@actPageNumb"
         NavigationMode="PagerNavigationMode.NumericButtons" />
}


@code
{
    private int indexFirstElInPage = 0;
    private int actPageNumb = 0;
    private int countOrderInPage = 5;
    private int orderToDeleteNumber { get; set; }
    private bool DeleteDialogOpen { get; set; }
    private string DeleteText = string.Empty;
    Client? selectedClient { get; set; }
    List<Client> allClients { get; set; }
    List<Order>? allOrdersFromDb { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await GetAllClient();

        await GetAllOrdersFromDB();
        if (allOrdersFromDb?.Count > 0)
            ShowOrderInPage();
    }

    private async Task GetAllClient()
    {
        allClients = await Http.GetAllClients();

        selectedClient = allClients?.FirstOrDefault();

        StateHasChanged();
    }

    private async Task GetAllOrdersFromDB()
    {
        allOrdersFromDb = await Http.GetAllOrdersFromDB();

        StateHasChanged();
    }

    private async Task CreateOrder(Client client)
    {
        NavigationManager.NavigateTo($"/Order/{client.Id}");
    }

    private void SelectedClientChanged(Client client)
    {
        selectedClient = client;
        allOrdersFromDb = null;
        StateHasChanged();
    }

    private async Task DeleteOrder(int id)
    {
        await Http.DeleteOrderWithStrings(id);

        GetAllOrdersFromDB();
    }

    private List<Order> OrdersForShow = new List<Order>();
    protected List<Order> ShowOrderInPage()
    {
        if (allOrdersFromDb?.Count > 0)
        {

            if (allOrdersFromDb.Count <= countOrderInPage)
            {
                OrdersForShow = allOrdersFromDb.GetRange(indexFirstElInPage, allOrdersFromDb.Count);
            }
            else if (allOrdersFromDb.Count > countOrderInPage && ((actPageNumb + 1) * countOrderInPage) <= allOrdersFromDb.Count)
            {
                OrdersForShow = allOrdersFromDb.GetRange(actPageNumb * countOrderInPage, countOrderInPage);
            }
            else if (allOrdersFromDb.Count > countOrderInPage && ((actPageNumb + 1) * countOrderInPage) > allOrdersFromDb.Count)
            {
                OrdersForShow = allOrdersFromDb.GetRange(actPageNumb * countOrderInPage, allOrdersFromDb.Count % countOrderInPage);
            }

            return OrdersForShow;
        }
        else
        return OrdersForShow = new();
    }

    protected int PageCounter()
    {
        if (allOrdersFromDb?.Count() % countOrderInPage == 0)
            return allOrdersFromDb.Count() / countOrderInPage;
        return allOrdersFromDb.Count() / countOrderInPage + 1;
    }

    private void OpenDialogeWindow(int orderId)
    {
        orderToDeleteNumber = 0;
        DeleteDialogOpen = true;
        orderToDeleteNumber = orderId;
        DeleteText = $"Вы действительно хотите удалить заказ №{orderToDeleteNumber}?";
        StateHasChanged();
    }

    private async Task ConfirmDelete_Click(bool accepted)
    {
        if (accepted && orderToDeleteNumber > 0)
        {
            await DeleteOrder(orderToDeleteNumber);
            orderToDeleteNumber = 0;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }
}