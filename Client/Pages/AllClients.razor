@page "/clients"
@using NSCBlazor.Client.Helpers
@using NSCBlazor.Shared
@using NSCBlazor.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager


<PageTitle>AllClients</PageTitle>

<style>
    .order-item {
        display: flex;
        background-color: rgba(250,240,230,0.75);
        border: 2px solid whitesmoke;
        border-radius: 12px;
        color: black;
        margin: 10px auto 30px auto;
        padding: 10px;
    }

    .order-item:hover {
        background-color: rgba(250,240,230,1.0);
        border: 2px solid black;
    }
    .delClient-btn{
        float:right;
        margin-right: 5px;
    }

    .delClient-btn:hover {
        color: indianred;
        float: right;
    }

    .otherSmall-btn:hover{
        color:gray;
    }
    .textBox-search{
        width:100%;
        margin: 10px 5px;
    }
    .search-btn{
        margin-top: 10px;
    }

    .forSpan-center{
        display: flex;
        justify-content: center;
    }
</style>

<div style="flex-direction: column; width:100%;">
    <span style="display: flex; justify-content: center; margin-left:auto;margin-right:auto; font-weight: bold;">Список клиентов</span>
    <div style="width:30%; max-width: 350px; min-width: 200px;display: flex; justify-content: center; margin-left:auto;margin-right:auto;">

        <DxTextBox Text="@SearchQuery"
                   NullText="Поиск..."
                   ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                   CssClass="textBox-search"
                   TextChanged="@((textQuery) => OnTextChanged(textQuery))" />
    </div>
</div>


@if (@clientsForShow == null)
{
    <LoadingWheel />
    <div>
        <span class="forSpan-center">Загрузка клиентов...</span>
    </div>    
}
else if (clientsForShow.Count == 0)
{
    <div><span class="forSpan-center">Список клиентов пуст!</span></div>
}
else
{
    foreach (var client in clientsForShow.OrderByDescending(client => client.DateRegistration))
    {
        <div class="order-item mt-3" style="flex-direction: column; max-width: 450px; min-width:300px;">
            <div style="flex-direction:row">
                <i class="fa fa-user" style="padding: 0px 0px 3px 5px;" />

                <span class="otherSmall-btn"
                      style="font-weight: 600; cursor:pointer; margin-left: 3px;"
                      title="Редактировать клиента" 
                      onclick="@(() => EditClient(client.Id))">@client.Name @client.Surname @client.City</span>

                <DxButton RenderStyle="ButtonRenderStyle.None"
                  title="Удалить клиента"
                  CssClass="fa fa-trash delClient-btn"
                  Click="@(() => DeleteClient(client.Id))" />
            </div>

            <span style="font-style: italic; margin-left: 19px;">@client.Tel</span>

            <hr style="margin: 10px 10px;" />

            <div class="d-flex flex-row">
                <div style="margin-left: 10px;">
                    <span>@client.Country: @client.Cargo</span>
                </div>
                <button class="fa fa-file-text otherSmall-btn"
                        style=" border: none;
                                background: transparent;
                                margin-left: auto;
                                margin-right: 5px;"
                        onclick="@(() => NavigToCreateOrderForThisClient(client))">Создать заказ</button>                
            </div>
        </div>
    }
}



@code {
    private string SearchQuery { get; set; } = string.Empty;

    List<Client> allClients;
    List<Client> clientsForShow;

    protected override async Task OnInitializedAsync()
    {
        await GetAllClient();

        clientsForShow = new();
        clientsForShow.AddRange(allClients);
    }

    private async Task GetAllClient()
    {
        allClients = await RouteHelper.GetAllClients(Http);

        StateHasChanged();
    }

    private async Task EditClient(int clientId)
    {
        NavigationManager.NavigateTo($"/Client/{clientId}");
    }

    private async Task DeleteClient(int id)
    {
        var deleteClientRequest = await RouteHelper.DeleteClient(Http, id);
        if (deleteClientRequest)
        {
            await GetAllClient();
            clientsForShow = allClients;
        }
    }

    private async Task NavigToCreateOrderForThisClient(Client client)
    {
        NavigationManager.NavigateTo($"/OrderForClient/{client.Id}");
    }

    private void OnTextChanged(string SearchQuery)
    {
        clientsForShow = new();
        clientsForShow.AddRange(allClients);

        if (SearchQuery?.Length > 2)
        {
            clientsForShow.RemoveAll(x => x?.Name?.ToLower().Contains(SearchQuery.ToLower()) == false &&
                                          x?.Surname?.ToLower().Contains(SearchQuery.ToLower()) == false &&
                                          x?.City?.ToLower().Contains(SearchQuery.ToLower()) == false);
        }
    }
}