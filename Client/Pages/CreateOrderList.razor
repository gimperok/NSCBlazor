@page "/Order/{orderId:int?}"
@page "/OrderForClient/{testClientid:int}/{orderId:int?}"


@using NSCBlazor.Client.Helpers
@using NSCBlazor.Client.Shared
@using NSCBlazor.Shared.Models
@using ProjectJson.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager

<style>
    table, th, tr, td {
        border: solid 1px;
        border-collapse: collapse;
    }

    table {
        width: 100%;
    }

    col, th, td {
        text-align: center;
    }

    input {
        width: 100%;
    }

    .blackColor {
        color: black;
    }

    .hideLabel {
        color: transparent;
    }

    .order-item{
        background-color: rgba(250,240,230,0.75);
        border: 2px solid whitesmoke;
        border-radius: 7px;
        color: black;
        margin: 15px auto 15px auto;
        padding: 3px 10px;
        width: fit-content;
    }
    .order-item:hover {
        cursor: pointer;
        background-color: rgba(250,240,230,1.0);
        border: 2px solid black;
    }

    .del-red:hover {
        color: indianred;
    }
    .print-btn:hover {
        color:blue;
    }

    .dxbs-grid>.card>.card-body, .dxbs-grid>.card>.card-header, .dxbs-grid>.card>.card-footer {
        background-color: peachpuff;
    }

    .page-link {
        background: peachpuff;
        border-color: black;
        color: black;
        border-width: 2px;
    }

    .page-item.active .page-link {
        background-color: peachpuff;
        border-color: black;
        font-weight: 600;
    }

    .dx-test-table{
        width:100%;
    }

    .my-grid .dxbs-grid-empty-data {
        opacity: 0;
    }

    /*шапка таблицы*/
    .dxbs-grid > .card .dxbs-scroll-viewer:first-child > .dxbs-scroll-viewer-content > .dxbs-grid-table > colgroup + thead > tr:first-child {
        /*background-color: rgba(250,240,230,1);*/
        background-color: blanchedalmond;
        border:2px solid black;
    }

    /*Тело таблицы*/
    .table-bordered > :not(caption) > * {
    /*background-color: rgba(250,240,230,0.50);*/    
        background-color: oldlace;
    }

    /*ячейки строки ввода*/
    .dxbs-input-group.input-group input.form-control, .item-theme {
        background: oldlace;
        text-align: center;
    }

    .wid3 {width:3%;} .wid4 {width: 4%;} .wid5 {width:5%;}
</style>




@if (selectedClient is null && testClientid == 0)
{
    <DxComboBox Data="@allClients"
                NullText="Выбрать клиента"
                FilteringMode="DataGridFilteringMode.Contains"
                TextFieldName="@nameof(Client.FullName)"
                Value="@selectedClient"
                CssClass="w-25 ml-27"
                ValueChanged="@((Client client) => SelectedClientChanged(client))" />
}
else
{
    if(order?.Id >= 0)
    {
        <div class="d-flex justify-content-between">
            <div class="d-flex flex-row">
                <a href="/client/@selectedClient?.Id" 
                   style="text-decoration: none;"><span class="@GetFontColorClass(selectedClient?.FullName)" 
                                                        style="font-weight: 600;" 
                                                        title="Просмотреть @selectedClient?.FullName">@selectedClient?.FullName</span></a>
                <span style="display:@VisibleChangeClient()">
                    <DxButton RenderStyle="ButtonRenderStyle.None"
                                      title="Сменить клиента"
                                      CssClass="fa fa-times-circle"
                                      Click="ChangeClientBtn_Click" />
                </span>
            </div>
            <div>
                <label class="@GetFontColorClass(order.Id)" style="font-weight: 600;">Заказ № @order?.Id</label>
            </div>
            <div>
                <label style="font-weight: 600;" >@order?.DateCreate?.ToString("dd.MM.yyyy")</label>
            </div>
        </div>
    }
}



@if (order != null && orderString != null)
{
    <EnterStringForm OrderString="@orderString" />

    <div @onclick="(()=>AddString())" class="order-item" >
        <i class="fa fa-plus" style="margin-right:5px;" />
        <span>Добавить строку</span>
    </div>
   
    @if (order?.OrderItems?.Count != 0)
    {
        <DxGrid Data="@order?.OrderItems?.OrderByDescending(x =>x.Id)" 
                PageSize="15"
                CssClass="general-grid dx-test-table my-grid">
            <Columns>
                <DxGridDataColumn FieldName=@nameof(OrderItem.Kod) Caption="Код"      Width="10%" TextAlignment="GridTextAlignment.Center" />
                <DxGridDataColumn FieldName=@nameof(OrderItem.Leather) Caption="Кожа" Width="15%" TextAlignment="GridTextAlignment.Center" />
                <DxGridDataColumn FieldName=@nameof(OrderItem.Color) Caption="Цвет"   Width="15%" TextAlignment="GridTextAlignment.Center" />   @*40*@
                                                                                               
                <DxGridDataColumn FieldName=@nameof(OrderItem.Size35)  Caption="35"   Width="2%" TextAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            string displayShow = (Convert.ToInt32(context?.Value) == 0) ? "" : context?.Value.ToString();
                        }
                        <span>@displayShow</span>
                    </CellDisplayTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName=@nameof(OrderItem.Size36)  Caption="36"   Width="3%" TextAlignment="GridTextAlignment.Center">                        
                    <CellDisplayTemplate>
                        @{
                            string displayShow = (Convert.ToInt32(context?.Value) == 0) ? "" : context?.Value.ToString();
                        }
                        <span>@displayShow</span>
                    </CellDisplayTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName=@nameof(OrderItem.Size37)  Caption="37"   Width="3%" TextAlignment="GridTextAlignment.Center">                        
                    <CellDisplayTemplate>
                        @{
                            string displayShow = (Convert.ToInt32(context?.Value) == 0) ? "" : context?.Value.ToString();
                        }
                        <span>@displayShow</span>
                    </CellDisplayTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName=@nameof(OrderItem.Size38)  Caption="38"   Width="3%" TextAlignment="GridTextAlignment.Center">                        
                    <CellDisplayTemplate>
                        @{
                            string displayShow = (Convert.ToInt32(context?.Value) == 0) ? "" : context?.Value.ToString();
                        }
                        <span>@displayShow</span>
                    </CellDisplayTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName=@nameof(OrderItem.Size39)  Caption="39"   Width="3%" TextAlignment="GridTextAlignment.Center">                        
                    <CellDisplayTemplate>
                        @{
                            string displayShow = (Convert.ToInt32(context?.Value) == 0) ? "" : context?.Value.ToString();
                        }
                        <span>@displayShow</span>
                    </CellDisplayTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName=@nameof(OrderItem.Size40)  Caption="40"   Width="3%" TextAlignment="GridTextAlignment.Center">                        
                    <CellDisplayTemplate>
                        @{
                            string displayShow = (Convert.ToInt32(context?.Value) == 0) ? "" : context?.Value.ToString();
                        }
                        <span>@displayShow</span>
                    </CellDisplayTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName=@nameof(OrderItem.Size41)  Caption="41"   Width="2%" TextAlignment="GridTextAlignment.Center">                         <CellDisplayTemplate>
                        @{
                            string displayShow = (Convert.ToInt32(context?.Value) == 0) ? "" : context?.Value.ToString();
                        }
                        <span>@displayShow</span>
                    </CellDisplayTemplate>
                </DxGridDataColumn>  @*19*@  @*59*@

                <DxGridDataColumn FieldName=@nameof(OrderItem.TotalCountPairs)  Caption="Пар" Width="4%" TextAlignment="GridTextAlignment.Center"/>  
                <DxGridDataColumn FieldName=@nameof(OrderItem.Price)            Caption="Цена"      Width="5%" TextAlignment="GridTextAlignment.Center"/>
                <DxGridDataColumn FieldName=@nameof(OrderItem.TotalPrice)       Caption="Итого"  Width="5%" TextAlignment="GridTextAlignment.Center"/>    @*73*@
                <DxGridDataColumn FieldName=@nameof(OrderItem.Note) Caption="Заметка" Width="24%" TextAlignment="GridTextAlignment.Center" />
                
                <DxGridCommandColumn Width="3%">
                    <HeaderTemplate>
                        <DxButton RenderStyle="ButtonRenderStyle.None"
                          title="Отправить на печать"
                          CssClass="fa fa-print print-btn"
                          Click="SetAndNavigateToURL" />
                    </HeaderTemplate>
                    <CellDisplayTemplate>
                        <DxButton RenderStyle="ButtonRenderStyle.None"
                          title="Удалить строку"
                          CssClass="fa fa-trash del-red" 
                          Click="(() => OpenDialogeWindow(context.DataItem as OrderItem))" />
                    </CellDisplayTemplate>
                </DxGridCommandColumn>

            </Columns>
        </DxGrid>

        @if (DeleteDialogOpen)
        {
            <ModalWindow Title="Подтверждение удаления" 
                         BodyText="Вы действительно хотите удалить строку?" 
                         BackgroundFormColor="whitesmoke"
                         OnClose="@ConfirmDelete_Click" 
                         DialogType="ModalWindow.ModalDialogType.DeleteCancel">
            </ModalWindow>
        }
     

        <hr />
        <div class="d-flex justify-content-between">
            <div class="d-flex flex-column">
                <span style="font-weight:600;font-style: italic;">Позиций: @order?.TotalPosition</span>
                <span style="font-weight:600;font-style: italic;">Пар: @order?.TotalPairs</span>
            </div>

            <div class="d-flex flex-column">
                <span style="font-weight:600;font-style: italic;">Итого: @order?.OrderTotalMoney.ToString("#.##")$</span>
                <span style="font-weight:600;font-style: italic;">Депозит: @order?.Deposit.ToString("#.##")$</span>
            </div>
        </div>
    }
}
else
{
    <span>Лист заказа еще не создан</span>
}



@code {


    [Parameter]
    public int? orderId { get; set; }

    [Parameter]
    public int testClientid { get; set; }

    private bool DeleteDialogOpen { get; set; }

    Order order;
    OrderItem? stringToDelete;
    OrderItem orderString = new OrderItem();

    List<Client> allClients;
    Client selectedClient;


    protected async override Task OnInitializedAsync()
    {
        if (orderId > 0)
        {
            await GetOrderById((int)orderId);
            await GetClient(order.ClientId);
        }
        else
        {
            await CreateOrderObject();

            if (testClientid > 0)
                await GetClient(testClientid);
            else
                await GetAllClient();
        }
    }

    protected string VisibleChangeClient()
    {
        return (order?.Id > 0 && selectedClient != null || order?.Id == 0 && testClientid > 0) ? "none" : "flex";
    }


    protected async void ChangeClientBtn_Click()
    {
        if (selectedClient != null)
        {
            selectedClient = null;
            testClientid = 0;
        }

        await GetAllClient();
    }


    private void SelectedClientChanged(Client client)
    {
        selectedClient = client;

        StateHasChanged();
    }


    protected async Task CreateAndGetOrder()
    {
        if (selectedClient.Id > 0)
        {
            order.ClientId = selectedClient.Id;

            var resp = await RouteHelper.AddOrder(Http, order);

            if (resp.IsSuccessStatusCode)
                order = await RouteHelper.GetLastCreatedOrderListByClientId(Http, selectedClient.Id);
            orderId = order.Id;
        }
    }


    protected async Task AddString()
    {
        if (selectedClient is not null)
        {
            if (orderId > 0)
            {
                orderString.Kod  = orderString?.Kod?.ToUpper();
                orderString.Leather = orderString?.Leather?.ToUpper();
                orderString.Color = orderString?.Color?.ToUpper();
                orderString.OrderId = order.Id;
                var resp = await RouteHelper.AddOrderString(Http, orderString);
                if (resp.IsSuccessStatusCode)
                {
                    order.OrderItems = await RouteHelper.GetAllStringsByOrderListId(Http, order.Id);

                    ClearFields();

                    StateHasChanged();
                }
            }
            else
            {
                await CreateAndGetOrder();
                await AddString();
            }
        }
    }


    protected async Task CreateOrderObject()
    {
        order = new Order();
        order.OrderItems = new();
    }


    private async Task GetAllClient()
    {
        allClients = await RouteHelper.GetAllClients(Http);

        StateHasChanged();
    }


    private string GetFontColorClass(int size)
    {
        return (size == 0) ? "hideLabel" : "blackColor";
    }

    private string GetFontColorClass(string prop)
    {
        return (prop is null) ? "hideLabel" : "blackColor";
    }

    protected void SetAndNavigateToURL()
    {
        string loadURL = $"PrintReport/GetResultReqestReportFile?clientId={order.ClientId}&orderId={order.Id}";
        NavigationManager.NavigateTo(loadURL, true);
    }

    protected async Task GetClient(int? clientId)
    {
        if (clientId > 0)
            selectedClient = await RouteHelper.GetClientById(Http, (int)clientId);
    }

    protected async Task GetOrderById(int orderId)
    {
        order = await RouteHelper.GetOrderById(Http, orderId);

        var allOrderStringsList = await RouteHelper.GetAllStringsByOrderListId(Http, orderId);

        if (order != null)
            order.OrderItems = allOrderStringsList;
    }

    protected async Task DelString(OrderItem orderString)
    {
        orderString.OrderId = order.Id;
        var resp = await RouteHelper.DeleteOrderString(Http, orderString);

        if (resp.IsSuccessStatusCode)
            order.OrderItems.Remove(orderString);

        StateHasChanged();
    }

    private void OpenDialogeWindow(OrderItem item)
    {
        stringToDelete = new();
        DeleteDialogOpen = true;
        stringToDelete = item;
        StateHasChanged();
    }

    private async Task ConfirmDelete_Click(bool accepted)
    {
        if (accepted && stringToDelete is not null)
        {
            await DelString(stringToDelete);
            stringToDelete = null;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    protected void ClearFields()
    {
        orderString.Kod = string.Empty;
        orderString.Leather = string.Empty;
        orderString.Color = string.Empty;
        orderString.Note = string.Empty;

        orderString.Size35 = 0;
        orderString.Size36 = 0;
        orderString.Size37 = 0;
        orderString.Size38 = 0;
        orderString.Size39 = 0;
        orderString.Size40 = 0;
        orderString.Size41 = 0;
        orderString.Price = 0;
    }
}